package crypto

import (
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/tyler-smith/go-bip39"
)

const (
	kesMnemonic = "math pair canoe wolf donor moon luggage brain proof merge arrive snack exact face pipe salad chapter imitate fiber audit around copper climb deliver"
)

func TestNewKesKey(t *testing.T) {
	entropy, err := bip39.EntropyFromMnemonic(kesMnemonic) // 32 bytes
	assert.NoError(t, err)

	kesKey, err := NewKesKey(entropy)
	assert.NoError(t, err)

	expectedKesSKey := "ab9b00aa21a0593a78140e5cb7f2d8d22269ff3780b286e7c05cd480a66cf940c7b84451d906b8685a531df1b0c18a5b213d847a024ee5e2e44d9565d8ea2bcbc997c4b3c087efceec1c3a7e46135da9147f928d85a8fdc0a8bc8678c7280c6eedb0632385154618f7b359c4bb4cb84a1cbab9be1886e9a6805058054e44a64f503bc1af51b28ba6913e3bc6a85089a3a38e8a9b27b17d32c86dbddbd693fa7f7917953c0fee1d5575907624dac6049bb127c3f6bd2314cef780c2ac8385a99d8dfae71407400a212a491bd4772bc3741378a8a167af74a27704fbde325dcb8498aa0cfb4123098f052117c90127e299361a11c7c294f5890866fc63c16327e74abadd6703d1a4c805cc77afe7ac44f8ee26aa16917224e62899f7e78f12017d0e5778c00c121b5d76b06131cba18f21ddcd2cc0ed1f73f04b807defbb719f6076525e92593a9d63e756dd35c12e0b3501855fb2c05a2f931f77a7915a50ce2cc16cdbde4cb10677fa9e981ad2ce5bb209d126b3e5ee9c1b8d41419388d6b73d50a4815881301ba011a2d4e91e71066a9416796453be6119526cf69d65e8979ce2bfa5227a2ae5ce90679f437499c52d76dfe6a76c362a7c9e25bd7628c9e677ac9b4595648f9ac291983d576f8cbd8505119607f9a961185a17bbec15b33703036ac18e87d59670bcc0cd9d4006e5a0f15dcf05601a5b9a9cc603e33f377fb4acce35c43727acd1ca23abf519f70a700feb7dae855eb1d84707f4c4674406ac74276928c3189d528fa60808a5190181959b0e060b0a361eef4f8fe791d60035dc936e51a2f047071b163bd350668218c5fe83519d99a44b4009dd4533122f6b00000000"
	expectedKesVKey := "dfccc5df3bacb345e9b3cd6ca96e5ebc7fb49861815e7d5ac92b5e71da63e5ed"
	assert.Equal(t, expectedKesSKey, kesKey.PrvKey.String())
	assert.Equal(t, expectedKesVKey, kesKey.PubKey.String())
}

func TestNewKesKeyWithDerivation(t *testing.T) {
	entropy, err := bip39.EntropyFromMnemonic(kesMnemonic) // 32 bytes

	accountIndex := uint32(1)
	rootKey := NewXPrvKeyFromEntropy(entropy, "")
	stakePoolColdKey := rootKey.Derive(1852 + 0x80000000).Derive(1815 + 0x80000000).Derive(0x80000000).Derive(accountIndex + 0x80000000)
	stakePoolKesKey := stakePoolColdKey.Derive(1)

	kesKey, err := NewKesKey(stakePoolKesKey.PrvKey()[:32])
	assert.NoError(t, err)

	expectedKesSKey := "c4dc0f2f73b57956b56aaa23669d193135b85dfb5b6e0895e85d673a1c1543419a358b7b6fecfd27c1dfbf278feebeef84b87c6f9274433d511b5af66c39781159393e30a3b571ad5b86dce37ed03dd1e05247dc59e183f9111a9d50aa252726a3c0ef508bcb0cf335305df57233e4f14bf551eb634aee7f2a8631c3e104c34ea0a8c94801b6db84a9639f0ca962acb2664fcd1e887211d70b5929cebd5fea84135dad2e4fd7b35b84d3cc27d253d9574476e397e1e11b6e9a365130404eb65ab6d14914d88cf10d141d51a0a4a8d8a709208b3768ba0abb300a39cd0403ba83377ee6575226219e248d29fa3036050ca5d7a0fb6ff6db804588da672f928f599bb0557b0fc11ef05c190a3d0c990a6f3fe257bc67d72ce0082186457531d3d87d40c3350974db9798c1bc52ab2f78bacecedc0342a791f3fdd135625b3bbe2bd7a7d9830e1888b1e4bb429615a0023d271f3584ffd2b8d6b85dbf42315399b11686bd6e88c73915e861ca2bcdd5202fa1305cf79d3c6afe31ebb272c902d3c0e6c317e40b7269c2fe3fbf8e0b02887982b5077172ff20be464856e0a358235b3753af507f14efe9e32fa2e7258665ca6986662fd3de9ad2a6a53f8476fd3bff3b65eca4154e312ae42d4f88e8bdc0f3760f3e901dc45a8e3ea274566dc431aeaaa7b74c5bc33f519afb7e52592cd4eaddd235c0606b791ca0b84b0c27ed718fb7501d1bb1d20338dda3ac75e8091fef8657a48ad48adefb28b4afecde0be5d55853e4bd917f6794bb8362120ec2d34bbe449a88743a396dac8fbaa601320ff51fce83131ab242a4b9a97305a9bfc5ba937cf1b5bd704c4a511cc5947fcebb3f00000000"
	expectedKesVKey := "8602274eaad3af3f3f2d7e57c46ae46baf8b484ccded431d62ead553af1a62a9"
	assert.Equal(t, expectedKesSKey, kesKey.PrvKey.String())
	assert.Equal(t, expectedKesVKey, kesKey.PubKey.String())
}
